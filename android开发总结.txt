1.************************打开ART的tombstone开关******************************
runtime/native/dalvik_system_ZygoteHooks.cc
Dbg::setJdwpAllowed方法里面的EnableDebugger()使能
************************打开ART的tombstone开关******************************
2.android转场动画 windowAnimation和ActivityAnimation
3.Roboto 都是 Android 系统的默认字体集
4.AsyncTask是串行执行任务的，并行可以采用xecuteOnExecutor()
#execute()提交的任务，按先后顺序每次只运行一个
5.Android利用wps打开pdf
public void openfilewithwps(View view，String path){
   	 Intent intent = new Intent();
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.setAction(android.content.Intent.ACTION_VIEW);
        intent.setClassName("cn.wps.moffice", "cn.wps.moffice.documentmanager.PreStartActivity");
        Uri uri = Uri.fromFile(new File(path));
        intent.setData(uri);
		//intent.setDataAndType(uri, "application/msword"); word时添加？？？
        try  {
        	startActivity(intent);
        } catch (ActivityNotFoundException e)    {
        e.printStackTrace();
        }
   }
   
************************android UI布局***************************************************************************************
1.在安卓中，只有垂直的linearlayout属性里面的内部组件靠左靠右才有效，同理，水平的linearlayout属性里面的内部组件靠上靠下才有效
2.控件里面的子控件垂直居中linearlayout设置android:gravity="center_vertical"
3.View默认是没有焦点的，Button有。
4.RelativeLayout垂直居中
android:gravity="center_vertical"
android:orientation="horizontal"

android:layout_centerHorizontal 控制该组件是否位于布局容器的水平居中位置
android:layout_centerVertical 控制该组件是否位于布局容器的垂直居中位置
android:layout_centerInParent 控制该组件是否位于布局容器的中央位置
android:layout_alignParentBottom 控制该组件是否与布局容器底端对齐
android:layout_alignParentLeft 控制该组件是否与布局容器左边对齐
android:layout_alignParentRight 控制该组件是否与布局容器右边对齐
android:layout_alignParentTop 控制该组件是否与布局容器顶端对齐
android:layout_toRightOf 控制该组件位于给出的ID组件的右侧
android:layout_toLeftOf 控制该组件位于给出的ID组件的左侧
android:layout_above 控制该组件位于给出的ID组件的上方
android:layout_below 控制该组件位于给出的ID组件的下方
android:layout_alignTop 控制该组件与给出的ID组件的上边界对齐
android:layout_alignBottom 控制该组件与给出的ID组件的下边界对齐
android:layout_alignLeft 控制该组件与给出的ID组件的左边界对齐
android:layout_alignRight 控制该组件与给出的ID组件的右边界对齐
#######################android 布局##################################
android:layout_weight的真实含义是:一旦View设置了该属性(假设有效的情况下)，那么该 View的宽度等于原有宽度(android:layout_width)加上剩余空间的占比！

设屏幕宽度为L，在两个view的宽度都为match_parent的情况下，原有宽度为L，两个的View的宽度都为L，那么剩余宽度为L-（L+L） = -L, 左边的View占比三分之一，
所以总宽度是L+(-L)*1/3 = (2/3)L.事实上默认的View的weight这个值为0，一旦设置了这个值，那么所在view在绘制的时候执行onMeasure两次的原因就在这。
#######################android 布局##################################

****************************Android studio生成jar包*************************************
http://blog.csdn.net/hard_working1/article/details/52639776
task makeJar(type:org.gradle.api.tasks.bundling.Jar) {
    //指定生成的jar名
    baseName 'httputils'
    //从哪里打包class文件
    from('build/intermediates/classes/debug/com/zxxk/httputils')
    //打包到jar后的目录结构
    into('com/zxxk/httputils/')
    //去掉不需要打包的目录和文件
    exclude('BuildConfig.class', 'R.class')
    //去掉R$开头的文件
    exclude{ it.name.startsWith('R$');}
}

makeJar.dependsOn(clearJar, build)
********************************************************************************************

************************************bootchart查看系统启动所消耗时间*****************************
老版本bootchart，在/data下
  echo 80 > bootchart-start ; mkdir bootchart
Android 6.0 
  默认开启bootchart功能
 在 /data/bootchart下, echo 80 > start
Android O:
  默认开启bootchart功能
  在system/core/init/buidins.cpp中注册方式调用do_bootchart()
步骤：
1.loader中设置quiet，关闭多余log
   方法：开机时按回车进入loader提示符，输入 print bootargs，复制输出的值，末尾添加quiet，再 set bootargs 新值，reset
2.启用bootchart
  方法：echo 1 > /data/bootchart/enabled
3. 断电，按遥控器电源键开机，记录从按下电源键，到 开机动画结束出现主页的时间。
4. 进入 /data/bootchart目录下，已生成log文件
删除文件 enabled 
打包：  busybox tar -czvf bootchart.tgz *
*******************************************Android apk反编译****************************
apktool.bat   d  -f    [apk文件 ] 
apktool.bat d -f  Share.apk share
d2j-dex2jar.bat   classes.dex

apktool.bat   b   [apk文件夹 ] 

java -jar baksmali-2.0.2.jar -a 16 -x test.odex -d .
java -jar smali-2.0.2.jar -a 16 -o classes.dex out
*******************************************Android apk反编译****************************

##############################################################################
生成一个针对该项目的build.xml呢？(sdk 版本ID android.bat list target)
这里需要一个工具。就是SDK自带的android.bat .所在目录<sdk>tools/android.bat
然后通过命令行执行“android update project -n 工程名 -t sdk 版本ID -p 工程路径 .”即可。
完毕后即可通过android命令在当前项目目录下生成一个build.xml文件
###########################Android编译#####################################################

*******************************************Android 方案商定制****************************
如果用户想个性定制自己的产品，应该有以下流程，包含上一节内容：
1. 创建公司目录

    #mkdir vendor/farsight

2. 创建一个vendorsetup.sh文件，将当前产品编译项添加到lunch里，让lunch能找到用户个性定制编译项

    #echo "add_lunch_combo fs100-eng" > vendor/farsight/vendorsetup.sh

3. 仿着Android示例代码，在公司目录下创建products目录

    #mkdir -p vendor/farsight/products

4. 仿着Android示例代码，在products目录下创建两个mk文件

    #touch vendor/farsight/products/AndroidProduct.mk vendor/farsight/products/fs100.mk

在AndroidProduct.mk里添加如下内容：
PRODUCT_MAKEFILES := $(LOCAL_DIR)/fs100.mk
表示只有一个产品fs100，它对应的配置文件在当前目录下的fs100.mk。

5. 在产品配置文件里添加最基本信息
  1 
  2 PRODUCT_PACKAGES := \
  3     IM \
  4     VoiceDialer
  5 
  6 $(call inherit-product, build/target/product/generic.mk)  ##从某一默认配置开始派生余下内容参考派生起点
  7 
  8 # Overrides
  9 PRODUCT_MANUFACTURER := farsight
 10 PRODUCT_NAME := fs100
 11 PRODUCT_DEVICE := fs100
###########################Android编译#####################################################
使用xliff的用法：
<xliff:g>标签介绍： 
属性id可以随便命名 
属性值举例说明
%n$ms：代表输出的是字符串，n代表是第几个参数，设置m的值可以在输出之前放置空格 
%n$md：代表输出的是整数，n代表是第几个参数，设置m的值可以在输出之前放置空格，也可以设为0m,在输出之前放置m个0 
%n$mf：代表输出的是浮点数，n代表是第几个参数，设置m的值可以控制小数位数，如m=2.2时，输出格式为00.00 
也可简单写成：
%d   （表示整数）
%f    （表示浮点数）
%s   （表示字符串）
#################################Android单例########################################
public ManagerHolder(Context context){
mContextRef = new WeakReference<Context>(context);
}
public ATVManager getATVManager(){
    mATVManager = new ATVManager(mContextRef.get())
    return mATVManager;
}
###############################Android fragment#####################################
private void setMailInfoFragment(){
        FragmentManager fm = getFragmentManager();
        FragmentTransaction transaction = fm.beginTransaction();
        mMailInfoFragment = new MailInfoFragment();
        transaction.replace(R.id.fragment_container, mMailInfoFragment);
        transaction.commit();
    }
###############################git 更改远程分支#####################################
1：想下哪个分支的代码就根据附件中的分支来进行切换
打开文件:.repo/manifest.xml文件，修改revision部分，换成380的分支或者590等等

 <default remote="master" revision="mstar_918" sync-j="4" />

2：进入工程：jb4.3-mstar-master/device/hisense下，进行如下操作，例如
（1）repo start 0312 --all
（2）git reset HEAD --hard
 (3) repo sync .
然后进行你们的修改，然后提交就可以了
#####################################################################################

###################################Android添加具有root权限的应用########################################
1.写好脚本之后，如test.sh放在prebuilt里面
2.然后在app.mk里面添加
PRODUCT_COPY_FILES+=
prebuilt/test.sh:/system/bin/test.sh
3.修改init.rc文件
servic test /system/bin/test.sh
user root
group root
disable
oneshot

###################################Android shell command####################################################
1.1：察看已安装的包：
pm list package
此时则显示所有已经安装的包名。

pm list package -f
也显示associated文件所在目录(即保存的APK文件)

1.2：察看已知的权限组：
pm list permission-groups

1.3：察看所有已知的权限：
pm list permissions

1.4：列出所有硬件相关信息：
pm list features
1.5 
dumpsys SurfaceFlinger
1.6
dumpsys window
1.7 
pm enable package/acitvity
**********************************************
1，首先将framework.jar拷贝到项目的/libs文件夹中，然后右键framework.jar文件，然后Add as Library 
2.Open->Module Setting，然后将framework.jar的Scope改为 Provided 
3.改了framework.jar 的scope后，再在修改project的build.gradle文件
gradle.projectsEvaluted{
 tasks.withType(JavaCompile){
    options.compilerArgs.add('-Xbootclasspath/p:app\\libs\\framework.jar')
 }
}
############################################apk安装过程######################################################################################
复制APK安装包到data/app目录下，解压并扫描安装包，把dex文件(Dalvik字节码)保存到/data/dalvik-cache目录，并data/data目录下创建对应的应用数据目录。


##########################################Android openGL ES2.0#############################################
读取顶点数据——执行顶点着色器——组装图元——光栅化图元——执行片元着色器——写入帧缓冲区——显示到屏幕上。


############################################c、c++层调用 android log#######################################
c、c++层调用：在c,c++层包含此头文件：#include <cutils/log.h>

###########################libutils and libcutils作用说明##################################################
 第一部分 libutils概述

　　libutils是Android的底层库，这个库以C++实现，它提供的API也是C++的。Android的层次的C语言程序和库，大都基于libutils开发。
　　libutils中的头文件如下所示：
　　frameworks/base/include/utils
　　libutils的源文件：
　　frameworks/base/libs/utils
　　libutils的库名称：
　　libutils.so
　　这个库可以分成两个部分，一个部分是底层的工具，另外一个就是实现主要为实现IPC(进程间通讯)的Binder机制。
　　第二部分 公共库概述
　　libutils中的公共库部分主要包含的头文件如下所示：
　　Errors.h：定义宏表示错误代码
　　Endian.h：定义表示大小端的宏
　　misc.h：几个字符串和文件相关的功能函数
　　TextOutput.h：定义文本输出的基类TextOutput
　　BufferedTextOutput.h：类BufferedTextOutput，它是一个TextOutput的实现
　　Pipe.h：定义管道类Pipe
　　Buffer.h：定义内存缓冲区域的类Buffer
　　List.h：定义链表的模版类
　　SharedBuffer.h：定义类SharedBuffer表示共享内存。
　　String16.h：定义表示双字节字符串的类String16
　　String8.h：定义表示单字节字符串的类String8，并包含了从String16转换功能
　　VectorImpl.h：定义表示向量的类VectorImpl
　　Vector.h：定义继承VectorImpl的类模版Vector，以及排序向量类SortedVectorImpl
　　SortedVector.h：定义排序向量的模版SortedVector
　　KeyedVector.h：定义使用关键字的向量模板KeyedVector
　　threads.h：定义线程相关的类，包括线程Thread、互斥量Mutex、条件变量Condition、读写锁ReadWriteLock等
　　socket.h：定义套结字相关的类Socket
　　Timers.h：定义时间相关的函数和定时器类DurationTimer。
　　ZipEntry.h、ZipFileCRO.h、ZipFile.h、ZipFileRO.h、ZipUtils.h：与zip功能相关的类。
　　第三部分 Binder进程间通讯部分
　　Binder是进程间通讯部分的核心,它为不同的系统提供了可移植的进程间通讯手段。
　　RefBase.h :
　　引用计数，定义类RefBase。
　　Parcel.h :
　　为在IPC中传输的数据定义容器，定义类Parcel
　　IBinder.h：
　　Binder对象的抽象接口， 定义类IBinder
　　Binder.h：
　　Binder对象的基本功能， 定义类Binder和BpRefBase
　　BpBinder.h：
　　BpBinder的功能，定义类BpBinder
　　IInterface.h：
　　为抽象经过Binder的接口定义通用类，
　　定义类IInterface，类模板BnInterface，类模板BpInterface
 　ProcessState.h
　　表示进程状态的类，定义类ProcessState
　　IPCThreadState.h
　　表示IPC线程的状态，定义类IPCThreadState
　　IServiceManager.h：表示服务管理器的类，供其它需要构造服务的类使用
 　IPermissionController.h：权限控制类。
　　几个与内存相关的类的头文件如下所示：
　　IMemory.h：定义内存相关类的接口，表示堆内存的类IMemoryHeap和BnMemoryHeap，表示一般内存的类IMemory和BnMemory。
　　MemoryHeapBase.h：定义类MemoryHeapBase，继承并实现BnMemoryHeap
　　MemoryBase.h：定义类MemoryBase，继承并实现BnMemory
　　在一般的使用过程中，通常是以使用MemoryHeapBase类分配一块堆内存(类似malloc)，而MemoryBase表示从一块分配好堆内存中的一部分内存。
　　此外内存相关的功能中还包含了头文件MemoryDealer.h和MemoryHeapPmem.h。
查看原文：http://newfaction.net/2010/12/21/android-c-library-libcutils-the-underlying-language.html
C 语言底层库提供了 C 语言中最基本的工具功能。这是 Android 本地中最为基础的库,基本上 Android 中所有的本地的库和程序都连接了这个库。 头文件的路径:
system/core/include/cutils
库的路径
system/core/libcutils
编译的结果是: libcutils.so libcutil 中主要的头文件:
threads.h :线程 sockets.h : Android 的套接字 properties.h : Android 的属性 log.h : log 信息 array.h :数组 ashmem.h :匿名共享内存 atomic.h :原子操作 mq.h :消息队列
##########################################################libutils and libcutils作用说明###########################################################################

############################################################android thumbnails############################################################################################
MediaScanner可以通过手动控制，在ANDROID系统中，已经定制了三种事件会触发MediaScanner去扫描磁盘文件：ACTION_BOOT_COMPLETED、ACTION_MEDIA_MOUNTED、 
ACTION_MEDIA_SCANNER_SCAN_FILE。



*********************************************Native层获取Surface的方法***********************************************************
方法一：
1.#include <android_runtime/android_view_Surface.h>
2.Android.mk中添加 LOCAL_SHARE_LIBRARY +=libandroid_runtime
3.static void android_hardware_Camera_setPreviewSurface(JNIEnv *env,jobjet this,jobjet jSurface)
{
    sp<IGraphicBufferProducer> gbp;
    sp<Surface> surface;
    if(jSurface){
      surface = android_view_Surface_getSurface(env,jSurface);
      if(surface!= NULL){
        gdb = surface->getIGraphicBufferProducer();
      }
    }
}
方法二
ANativeWindow * mWindow;
nativeSurfaceChanged(JNIEnv *env,jclass type,jobject surface) {
    mWindow = ANativeWindow_fromSurface(env, surface);

}
************************************************************************************************************************************
**************************************native assertmanager**************************************************************************
#include "com_jnirenderer_RendererJNI.h"
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <GLES3/gl3.h>
#include <android/asset_manager_jni.h>
#include <android/log.h>


#define LOG_TAG "ndk-build"
#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)

GLint	g_programObject;
jint	g_width;
jint	g_height;

AAssetManager* g_pAssetManager = NULL;

char* readShaderSrcFile(char *shaderFile, AAssetManager *pAssetManager)
{
	AAsset *pAsset = NULL;
	char *pBuffer = NULL;
	off_t size = -1;
	int numByte = -1;

	if (NULL == pAssetManager)
	{
		LOGE("pAssetManager is null!");
		return NULL;
	}
	pAsset = AAssetManager_open(pAssetManager, shaderFile, AASSET_MODE_UNKNOWN);
	//LOGI("after AAssetManager_open");

	size = AAsset_getLength(pAsset);
	LOGI("after AAssetManager_open");
	pBuffer = (char *)malloc(size+1);
	pBuffer[size] = '\0';

	numByte = AAsset_read(pAsset, pBuffer, size);
	LOGI("%s : [%s]", shaderFile, pBuffer);
	AAsset_close(pAsset);

	return pBuffer;
}


GLuint LoadShader ( GLenum type, const char *shaderSrc )
{
   GLuint shader;
   GLint compiled;

   // Create the shader object
   shader = glCreateShader ( type );

   if ( shader == 0 )
   {
      return 0;
   }

   // Load the shader source
   glShaderSource ( shader, 1, &shaderSrc, NULL );

   // Compile the shader
   glCompileShader ( shader );

   // Check the compile status
   glGetShaderiv ( shader, GL_COMPILE_STATUS, &compiled );

   if ( !compiled )
   {
      GLint infoLen = 0;

      glGetShaderiv ( shader, GL_INFO_LOG_LENGTH, &infoLen );

      if ( infoLen > 1 )
      {
         char *infoLog = malloc ( sizeof ( char ) * infoLen );

         glGetShaderInfoLog ( shader, infoLen, NULL, infoLog );
         LOGE("Error compiling shader:[%s]", infoLog );

         free ( infoLog );
      }

      glDeleteShader ( shader );
      return 0;
   }

   return shader;

}

//*********************************************************************************
//
JNIEXPORT void JNICALL Java_com_jnirenderer_RendererJNI_readShaderFile(JNIEnv *env, jobject self, jobject assetManager)
{
	 if (assetManager && env)
	 {
		 //LOGI("before AAssetManager_fromJava");
		 g_pAssetManager = AAssetManager_fromJava(env, assetManager);
		 //LOGI("after AAssetManager_fromJava");
		 if (NULL == g_pAssetManager)
		 {
			 LOGE("AAssetManager_fromJava() return null !");
		 }
	 }
	 else
	 {
		 LOGE("assetManager is null !");
	 }
}

//*********************************************************************************
//
JNIEXPORT void JNICALL Java_com_jnirenderer_RendererJNI_glesInit(JNIEnv *pEnv, jobject obj)
{
	   char vShaderStr[] =
	      "#version 300 es                          \n"
	      "layout(location = 0) in vec4 vPosition;  \n"
	      "void main()                              \n"
	      "{                                        \n"
	      "   gl_Position = vPosition;              \n"
	      "}                                        \n";

	   char fShaderStr[] =
	      "#version 300 es                              \n"
	      "precision mediump float;                     \n"
	      "out vec4 fragColor;                          \n"
	      "void main()                                  \n"
	      "{                                            \n"
	      "   fragColor = vec4 ( 1.0, 0.0, 0.0, 1.0 );  \n"
	      "}                                            \n";

	   char *pVertexShader = readShaderSrcFile("shader/vs.glsl", g_pAssetManager);
	   char *pFragmentShader = readShaderSrcFile("shader/fs.glsl", g_pAssetManager);

	   GLuint vertexShader;
	   GLuint fragmentShader;
	   GLuint programObject;
	   GLint linked;

	   // Load the vertex/fragment shaders
	   //vertexShader = LoadShader ( GL_VERTEX_SHADER, vShaderStr );
	   //fragmentShader = LoadShader ( GL_FRAGMENT_SHADER, fShaderStr );
	   vertexShader = LoadShader ( GL_VERTEX_SHADER, pVertexShader );
	   fragmentShader = LoadShader ( GL_FRAGMENT_SHADER, pFragmentShader );

	   // Create the program object
	   programObject = glCreateProgram ( );

	   if ( programObject == 0 )
	   {
	      return;
	   }

	   glAttachShader ( programObject, vertexShader );
	   glAttachShader ( programObject, fragmentShader );

	   // Link the program
	   glLinkProgram ( programObject );

	   // Check the link status
	   glGetProgramiv ( programObject, GL_LINK_STATUS, &linked );

	   if ( !linked )
	   {
	      GLint infoLen = 0;

	      glGetProgramiv ( programObject, GL_INFO_LOG_LENGTH, &infoLen );

	      if ( infoLen > 1 )
	      {
	         char *infoLog = malloc ( sizeof ( char ) * infoLen );

	         glGetProgramInfoLog ( programObject, infoLen, NULL, infoLog );
	         LOGE("Error linking program:[%s]", infoLog );

	         free ( infoLog );
	      }

	      glDeleteProgram ( programObject );
	      return;
	   }

	   // Store the program object
	   g_programObject = programObject;

	   glClearColor ( 1.0f, 1.0f, 1.0f, 0.0f );

}

//*********************************************************************************
//
JNIEXPORT void JNICALL Java_com_jnirenderer_RendererJNI_glesRender(JNIEnv *pEnv, jobject obj)
{
	   GLfloat vVertices[] = {  0.0f,  0.5f, 0.0f,
	                            -0.5f, -0.5f, 0.0f,
	                            0.5f, -0.5f, 0.0f
	                         };

	   // Set the viewport
	   glViewport ( 0, 0, g_width, g_height );

	   // Clear the color buffer
	   glClear ( GL_COLOR_BUFFER_BIT );

	   // Use the program object
	   glUseProgram ( g_programObject );

	   // Load the vertex data
	   glVertexAttribPointer ( 0, 3, GL_FLOAT, GL_FALSE, 0, vVertices );
	   glEnableVertexAttribArray ( 0 );

	   glDrawArrays ( GL_TRIANGLES, 0, 3 );
}

//*********************************************************************************
//
JNIEXPORT void JNICALL Java_com_jnirenderer_RendererJNI_glesResize(JNIEnv *pEnv, jobject obj, jint width, jint height)
{
	g_width = width;
	g_height = height;
}



//***********************************Set the absolute position of a view设置view的绝对坐标*********************************************
RelativeLayout rl = (RelativeLayout) findViewById(R.id.my_relative_layout);

ImageView iv = new ImageView(this);

RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(30, 40);
params.leftMargin = 50;
params.topMargin = 60;
rl.addView(iv, params);



*****************************修改aar**********************************************************
To modify the original ARCore AAR library, follow the below instructions. You will need a java class decompiler, such as CFR.

Open a command line interface
Unzip the AAR to a temporary directory: unzip arcore_client-original.aar -d aar-tmp
Enter the temporary aar directory: cd aar-tmp
Unzip classes.jar to a temporary directory: unzip classes.jar -d classes-tmp
Enter the temporary classes directory: cd classes-tmp
Enter the directory containing the SupportedDevices class: cd com/google/atap/tangoservice
Decompile the SupportedDevices class: java -jar /path/to/cfr.jar SupportedDevices.class > SupportedDevices.java
Open a text editor and delete return false from the end of isSupported()
Compile the modified SupportedDevice class: javac -cp /path/to/sdk/platform/android.jar -source 1.7 -target 1.7 SupportedDevices.java
Delete the Java source: rm SupportedDevices.java
Change directory back to aar-tmp: cd ../../../../../
Create a JAR from the modified classes directory: jar cvf classes.jar -C classes-tmp .
Change directory back to repo root: cd ..
Create an AAR from the modified aar directory: jar cvf arcore_client.aar -C aar-tmp .
**************************************修改aar*************************************************************


**************************************多进程问题*************************************************************
静态成员和单例模式失效
线程同步机制失效
SharedPreferences可靠性降低
Application被多次创建
**************************************多进程问题*************************************************************

**************************************Android N新特性*************************************************************
Android N引入了一个新特性： Direct Boot Mode—— 设备启动后进入的一个新模式，直到用户解锁（unlock）设备此阶段结束。
在此 Direct Boot Mode 下 APP 主要使用在如果情况

Alarm、clock 类的操作
需要做重要的或紧急的通知
底层服务类

使用场景的话，如手机丢了，捡到的人解不开锁，也做不了啥操作，现在任意工作在Direct Boot Mode 下的APP都可以“安全地”跑起来，和服务器建链，可以全方位的和捡手机的人进行沟通或拍照。
APP 要工作在DBM （Direct Boot Mode）下的话，manifest 中加入：

<activity|provider|receiver|service ...  
     android:directBootAware=”true”>
APP在进入DBM后会收到系统的广播消息： Intent.ACTION_LOCKED_BOOT_COMPLETED ——之前是开机完成，现在如果没有解锁。

用户解锁手机后，APP会收到另一条： Intent.ACTION_BOOT_COMPLETED —— 开机完成。
插值器
1：AccelerateDecelerateInterpolator 加速减速插补器（先慢后快再慢）
2：AccelerateInterpolator 加速插补器（先慢后快）
3：AnticipateInterpolator 向前插补器（先往回跑一点，再加速向前跑）
4：AnticipateOvershootInterpolator 向前向后插补器（先往回跑一点，再向后跑一点，再回到终点）
5：BounceInterpolator 反弹插补器（在动画结束的时候回弹几下，如果是竖直向下运动的话，就是玻璃球下掉弹几下的效果）
6：CycleInterpolator 循环插补器（按指定的路径以指定时间（或者是偏移量）的1/4、变速地执行一遍，再按指定的轨迹的相反反向走1/2的时间，再按指定的路径方向走完剩余的1/4的时间，最后回到原点。假如：默认是让a从原点往东跑100米。它会先往东跑100米，然后往西跑200米，再往东跑100米回到原点。可在代码中指定循环的次数）
7：DecelerateInterpolator 减速插补器（先快后慢）
8：LinearInterpolator 直线插补器（匀速）
9：OvershootInterpolator 超出插补器（向前跑直到越界一点后，再往回跑）
10：FastOutLinearInInterpolator MaterialDesign基于贝塞尔曲线的插补器 效果：依次 慢慢快
11：FastOutSlowInInterpolator MaterialDesign基于贝塞尔曲线的插补器 效果：依次 慢快慢
12：LinearOutSlowInInterpolator MaterialDesign基于贝塞尔曲线的插补器 效果：依次 快慢慢
**************************************Android 库对应的源码路径*************************************************************
bEGL.so------frameworks/native/opengl/libs/EGL/

libandroid.so——frameworks/base/native/android

libandroid_runtime.so——frameworks/base/core/jni

libandroidfw.so——frameworks/base/libs/androidfw

libaudioutils.so——system/media/audio_utils

libbinder.so——frameworks/native/libs/binder

libbluedroid.so——system/bluetooth/bluedroid

libc.so——bionic/libc

libcamera_client.so——frameworks/av/camera

libcorkscrew.so——system/core/libcorkscrew

libcpustats.so——frameworks/native/libs/cpustats

libcrypto.so——external/openssl

libcutils.so——system/core/libcutils

libdbus.so——external/dbus/dbus

libdvm.so——dalvik/vm

libemoji.so——frameworks/opt/emoji

libETC1.so——frameworks/native/opengl/libs

libgccdemangle——external/gcc-demangle

libgui.so——frameworks/native/libs/gui

libgabi++.so——abi/cpp

libGLESv1_CM.so——frameworks/native/opengl/libs

libharfbuzz.so——external/harfbuzz

libhwui.so——frameworks/base/libs/hwui

libhardware_legacy.so——hardware/libhardware_legacy

libjpeg.so——external/jpeg

libmedia.so——frameworks/av/media/libmedia

libmedia_native.so——frameworks/av/media/libmedia_native

libnetutils.so——system/core/libnetutils

libstagefright_foundation.so——frameworks/av/media/libstagefright/foundation

libsonivox.so——external/sonivox

libspeexresampler——external/speex

libstlport.so——external/stlport

libssl.so——external/openssl

libui.so——frameworks/native/libs/ui

libutils.so——frameworks/native/libs/utils

libusbhost.so——system/core/libusbhost
**************************************Android N生成源码jar包*************************************************************
部分客户存在需要在 eclipse 中开发并编译 TvApp 的场景，需要在工程中导入所依赖的
模块 jar 包（例如 Hitv、HitvShare、HiDTV、HiDtvShare、HiTvManager 等） 。
由于 AndroidN 版本开始基于 java1.8 环境，其默认采用 jack 编译器编译，将不会产生
out/target/common/obj/JAVA_LIBRARIES/XXX_intermediates/classes.jar 文件，而只会产
生.jack 中间文件，给开发带来困难。
解决方法为修改被依赖模块的 Android.mk 文件，添加 LOCAL_JACK_ENABLED =
disabled 属性，并使用 mma 命令编译，即可产生所需 jar 包。

**************************************确定应用是否有内存泄漏************************************************************
确定是否有应用内存泄露
使用如下脚本确认该应用内存是否有明显增大
while true
do
procrank | grep apk包名
sleep 3
done

确定是否有内核内存泄露。
使用如下脚本，查看 MemFree 和 Cached 之和是否在逐步减小。3.18 内核后可以查看
MemAvailable 是否逐步减小。
while true
do
cat /proc/meminfo
sleep 3
done
**************************************为可执行文件增加域************************************************************
为可执行文件 netshared 增加域，请按如下步骤和表 4-1 进行修改：
步骤 1 新建策略文件 netshared.te，并使用 type 关键字，定义一个域 netshared。
步骤 2 为 netshared 可执行文件定义自己的类型，并增加属性 exec_type，file_type。
步骤 3 添加 init_daemon_domain，表示 init 进程在执行 netshared 可执行文件时，自动将新进程
的域设为 netshared。
----结束
###############################hisi OSD显示和隐藏方法###############################################################
echo hide > /proc/msp/hifb0隐藏OSD层，只显示Video层
echo show > /proc/msp/hifb0显示OSD层

echo debug on > /proc/msp/hifb0
在绘制矩形时再cat /proc/msp/hifb0看一下 "上次的矩形会不显示，只显示当次矩形的" 两次的DisplayingAddr(register)有没有变化
     
      /* When compositionType is HWC_FRAMEBUFFER, HWC_OVERLAY,
                 * HWC_FRAMEBUFFER_TARGET, this is the handle of the buffer to
                 * compose. This handle is guaranteed to have been allocated
                 * from gralloc using the GRALLOC_USAGE_HW_COMPOSER usage flag.
                 * If the layer's handle is unchanged across two consecutive
                 * prepare calls and the HWC_GEOMETRY_CHANGED flag is not set
                 * for the second call then the HWComposer implementation may
                 * assume that the contents of the buffer have not changed. */
                buffer_handle_t handle;
 
                /* When compositionType is HWC_SIDEBAND, this is the handle
                 * of the sideband video stream to compose. */
                const native_handle_t* sidebandStream;

--------------------- 
Android Studio各个版本 导入framework.jar
https://blog.csdn.net/zhonghe1114/article/details/80923730

在Android L版本中，Google团队为了优化系统性能、提高安全性等等一些列需求，重构了SettingsProvider模块，在L版本中，
不在使用数据库来存储系统设置，而是通过xml将系统设置存储在了/data/system/user/ 目录下 
--------------------- 
class SettingsValueChangeContentObserver extends ContentObserver {
 
        public SettingsValueChangeContentObserver() {
            super( new Handler());
        }
 
        @Override
        public void onChange(boolean selfChange) {
            super.onChange(selfChange);
            Toast.makeText(MainActivity.this, Settings.System.getString(getContentResolver(), SAVE_NAME), Toast.LENGTH_SHORT).show();
        }  
}
 mContentOb = new SettingsValueChangeContentObserver();
    getContentResolver().registerContentObserver(Settings.System.getUriFor(SAVE_NAME),true, mContentOb);

--------------------- 
原文：https://blog.csdn.net/shineflowers/article/details/41682185 


--------------------------StorageManagerService里面创建了app的cache目录（.Android目录）
C++
#include “utils/CallStack.h”
android::CallStack cs(“haha”);
java *************************************打印stack**********************************
Log.d(TAG,Log.getStackTraceString(new Throwable()));

#include
extern "C" void dumping_callstack(void);
void dumping_callstack(void)
{
    android::CallStack cs("TAG");
}
参数client是一个Binder代理对象，它引用了运行在应用程序进程这一侧中的一个W对象，用来标志一个Activity窗口。
从前面Android应用程序窗口（Activity）与WindowManagerService服务的连接过程分析一文可以知道，
在应用程序进程这一侧的每一个W对象，在WindowManagerService服务这一侧都有一个对应的WindowState对象
--------------------- 
每一个Activity组件在WindowManagerService服务内部都对应有一个AppWindowToken对象，
用来描述该Activity组件的窗口在WindowManagerService服务中的状态
____________________________________________________________
Android 提供了 4 种类型的 layer 供选择，每个 layer 对应一种类型的窗口，
并对应这种窗口相应的操作： Layer ， LayerBlur ， LayerBuffer ， LayerDim 。
____________________________________________________________


********************CTS*************************************
ps -A -Z查看selinux相关lable
查看feature
pm list features

设置settings.db
settings get secure user_setup_complete
********************CTS*************************************

用adb开一个android的字符终端，其中可以使用以下命令：
    setprop  ctl.start  $SERVICE_NAME      #启动某个服务
    setprop  ctl.stop  $SERVICE_NAME      #停止某个服务
    
    
    
    2 - 快速出测试结果
主要用于前期摸底测试，尽快测出结果。

a) 准备3台电视 A,B,C

b) 三台电视升级同样版本，进行同样的测试前的设置准备

c) 开始测试，测试规则如下：

    1. A电视测试system相关模块。   测试命令  run cts --disable-reboot --skip-preconditions --exclude-filter CtsDeqpTestCases --exclude-filter CtsVideoTestCases --exclude-filter CtsMediaTestCases --exclude-filter CtsMediaStressTestCases
    2. B电视测试deqp相关模块。  测试命令   run cts --disable-reboot --skip-preconditions --m CtsDeqpTestCases
    3. C电视测试多媒体相关模块。测试命令 run cts --disable-reboot --skip-preconditions --include-filter CtsVideoTestCases --include-filter CtsMediaTestCases --include-filter CtsMediaStressTestCases
    将所有模块分三大部分同时进行测试，一般情况下一天即可出所有测试结果 
    
    
    
    ****************************************android检测进程是否存在，system权限*****************************************
    private IProcessObserver mProcessObserver = new IProcessObserver.Stub() {
        
        @Override
        public void onForegroundActivitiesChanged(int pid, int uid, boolean foregroundActivities) {
            Log.i(TAG, "onForegroundActivitiesChanged: pid " + pid + " uid " + uid);
        }


        @Override
        public void onProcessDied(int pid, int uid) {
            Log.i(TAG, "onProcessDied: pid " + pid + " uid " + uid);
        }

        @Override
        public void onImportanceChanged(int pid, int uid, int importance)
                throws RemoteException {
            
        }
    };
    public void moniterAppProcess() {
        
        try {

            Class<?> activityManagerNative = Class.forName("android.app.ActivityManagerNative");
            Method getDefaultMethod = activityManagerNative.getMethod("getDefault");  
            Object iActivityManager = getDefaultMethod.invoke((Object[]) null, (Object[]) null);
            if (iActivityManager != null) {

                Method registerMethod = activityManagerNative.getMethod("registerProcessObserver", new Class[]{IProcessObserver.class});
                
                registerMethod.invoke(iActivityManager, mProcessObserver);
                
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
}
